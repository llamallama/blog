<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
<channel>
    <title>The Pipetogrep Blog - Posts tagged with: Retro Computing</title>
    <link>https://blog.pipetogrep.org/tags/retro-computing/</link>
    <description>Posts tagged with: Retro Computing</description>
    <language>en</language>
    <lastBuildDate>Fri, 04 Jul 2025 17:57:37 -0400</lastBuildDate>
    <atom:link href="https://blog.pipetogrep.org/tags/retro-computing/rss.xml" rel="self" type="application/rss+xml" />
    <item>
        <title>Blogging Like It&apos;s 1998</title>
        <link>https://blog.pipetogrep.org/2025/06/25/blogging-like-it-s-1998/</link>
        <guid isPermaLink="true">https://blog.pipetogrep.org/2025/06/25/blogging-like-it-s-1998/</guid>
        <pubDate>Wed, 25 Jun 2025 01:15:26 -0400</pubDate>
        <atom:updated>2025-06-26T22:16:49-04:00</atom:updated>
        <description><![CDATA[<figure><img src="https://blog.pipetogrep.org/images/chonk_blogging.jpg" alt="Blogging Like It&apos;s 1998" title="Meet Chonk"><figcaption>Meet Chonk</figcaption></figure><h2>Meet Chonk (Controller For Scale)</h2>
<p><a href="/images/chonk_scale.jpg"><img src="/images/chonk_scale.jpg" alt="Chonk Blogging" /></a></p>
<p>As you can see, Chonk is a big girl. She is a Dell Inspiron 7000 from 1998 and weighs in at 8 pounds. Chonk comes with:</p>
<ul>
<li>Pentium II CPU at 367 MHz</li>
<li>320 MB RAM</li>
<li>4 GB CF card as its hard drive</li>
<li>ATI Mobility 1 (removable!) video card</li>
<li>14 inch LCD at 1024x768</li>
<li>Floppy disc/CD ROM combo module</li>
<li>1 USB 1.1 Port</li>
<li>2 PCMCIA card slots</li>
</ul>
<p>I am showing you this large, slow, 27 year old laptop because that is what I have written this blog post with. Not only was the text written on it, but it also edited all of the images, performed all the web research, generated all the HTML with a <a href="https://bssg.dragas.net/">static site generator</a>, uploaded a copy of the site to <a href="https://github.com/llamallama/blog">GitHub</a>, and kept all the blog files in sync with my server in real time. It even triggered a Kubernetes redeploy to take the changes live!</p>
<h2>WTF! Why? How?!</h2>
<p>The why is always the same. &quot;Because I can.&quot; But really, it's yet more proof of how wasteful the tech industry is and a challenge to myself to see if I could do everything required for this task entirely with this machine.</p>
<p>So how is Chonk doing all of this? With the venerable <a href="https://www.openbsd.org/">OpenBSD</a>! OpenBSD supports older 32bit systems and has all the tools and packages required for my blog workflow natively available. Those tools are:</p>
<ul>
<li>Bash (For updating this site via <a href="https://bssg.dragas.net/">BSSG</a>)</li>
<li>Git (Version Control)</li>
<li>Vim (Text editing via command line)</li>
<li>cmark (Markdown processor)</li>
<li>kubectl (Updating the site via Kubernetes))</li>
<li>Dillo (Tiny web browser)</li>
<li>Scrot (Taking screenshots via command line)</li>
<li>ImageMagick (Converting and resizing images via command line)</li>
<li>Syncthing (Real time file sync tool)</li>
<li>CWM (Super lightweight window manager)</li>
</ul>
<h2>Hardware</h2>
<p>I got Chonk from <a href="https://vcfed.org/events/vintage-computer-festival-east/">VCF East</a> 2025. She was $40 and in perfect condition. She had no hard disk but otherwise functioned perfectly.</p>
<p>To get her booting, I used a CF card to mini IDE adapter and an industrial CF card. To get her on the Internet, I used a USB 802.11n WiFi adapter coupled with PCMCIA USB 2 card. While she does have 1 USB port built in, it is USB 1.2 which would limit bandwidth to 12 Mb/s.</p>
<h2>Software (OpenBSD)</h2>
<p><a href="/images/chonk_screenshot.png"><img src="/images/chonk_screenshot.png" alt="OpenBSD Screenshot" /></a></p>
<p>The setup itself was simple. It is a standard OpenBSD 7.7 i386 install and everything hardware wise just works. The biggest challenge is it is so very very slow. By slow I mean:</p>
<ul>
<li>OS install time: 45 minutes</li>
<li>Boot time: 5 min 34 sec</li>
<li>BSSG rebuild time: 2 - 3 minutes depending on what is cached</li>
<li>Large HEIC to small JPG resize time: ~1 min per file</li>
</ul>
<p>Installing additional packages usually involved running the <code>pkg_add</code> command then walking away for a few minutes to do something else. This is due to the Pentium II being very slow with decompressing the TGZ (tar/gzip) packages.</p>
<p>Once everything was installed and configured, however, Chonk makes for an excellent and distraction free blog writing tool. Dillo is just enough to look up stuff on the web. The ImageMagick tools slowly converted and scaled HEIC files from my iPhone to smaller JPGs. Syncthing keeps all the blog related files synced across my server and other computers. Vim is its usual fantastic self that runs on everything.</p>
<p>Despite the slowness, at any given time, I still had 13-35 MB of free RAM and minimal swap usage. The only real concession I had to make was to only run Syncthing manually at the end of my writing sessions because it is by far the biggest RAM user at 66 MB. The actual writing process, however, was fast and comfortable.</p>
<h2>Why not Linux or NetBSD?</h2>
<p>I tried! <a href="https://www.netbsd.org/">NetBSD</a> was my first choice but the installer failed to boot with some obscure message and I didn't feel like dealing with it.</p>
<p>Next I tried <a href="http://tinycorelinux.net/">TinyCore Linux</a> which was much faster than OpenBSD in every way! The problem there was a lack of software availability. Cmark and Syncthing were not available and the versions the other standard tools BSSG relies on (awk, sed, etc.) are the BusyBox versions which may function differently than their full sized counterparts.</p>
<h2>Conclusion</h2>
<p>What did I get from this exercise? I learned the bare minimum required to do this task. I really enjoyed learning how to use the CWM window manager. I was once again impressed at how useful yet minimal the smaller BSD flavors are.</p>
<p>Now enjoy some sexy action shots of Chonk. Work it girl!</p>
<p><a href="/images/chonk_openbsd.jpg"><img src="/images/chonk_openbsd.jpg" alt="Chonk OpenBSD" /></a></p>
<p><a href="/images/chonk_front_closed.jpg"><img src="/images/chonk_front_closed.jpg" alt="Chonk Front" /></a></p>
<p><a href="/images/chonk_back.jpg"><img src="/images/chonk_back.jpg" alt="Chonk Back" /></a></p>
<p><a href="/images/chonk_stickers.jpg"><img src="/images/chonk_stickers.jpg" alt="Chonk Stickers" /></a></p>
<p>Want to discuss? Email me at <a href="mailto:blog@pipetogrep.org">blog@pipetogrep.org</a>.</p>]]></description>
        <dc:creator>Chris Jones (blog@pipetogrep.org)</dc:creator>
    </item>
    <item>
        <title>How to Install Windows NT 4 Server on Proxmox</title>
        <link>https://blog.pipetogrep.org/2025/05/23/how-to-install-windows-nt-4-server-on-proxmox/</link>
        <guid isPermaLink="true">https://blog.pipetogrep.org/2025/05/23/how-to-install-windows-nt-4-server-on-proxmox/</guid>
        <pubDate>Fri, 23 May 2025 18:41:50 -0400</pubDate>
        <atom:updated>2025-05-30T14:26:41-04:00</atom:updated>
        <description><![CDATA[<figure><img src="https://blog.pipetogrep.org/images/win_nt.png" alt="How to Install Windows NT 4 Server on Proxmox" title="Windows NT 4 Server Boot Screen"><figcaption>Windows NT 4 Server Boot Screen</figcaption></figure><h2>What?</h2>
<p>Windows NT 4 doesn't virtualise well. This guide shows how to do it with Proxmox with a minimal amount of pain.</p>
<h2>Why?</h2>
<p>I never got to use it and I only have so much room for old computers.</p>
<h2>You Will Need</h2>
<ul>
<li><a href="https://www.proxmox.com">Proxmox Virtual Environment</a></li>
<li><a href="https://winworldpc.com/product/windows-nt-40/40">Windows NT 4 Server ISO</a></li>
<li>Realtek 8139 Network Card drivers converted into an ISO file.
<ul>
<li><a href="/downloads/win_nt_proxmox/realtek8139.iso">My ISO converted copy</a></li>
<li><a href="https://archive.org/details/realtek-rtl-8139-lan-drivers-win-9x-win-nt-2000.-7z">Original driver source</a></li>
</ul>
</li>
<li>LSI 53C895A SCSI controller drivers converted to a floppy image.
<ul>
<li><a href="/downloads/win_nt_proxmox/lsi_533895a_floppy.img">My floppy converted copy</a></li>
<li><a href="https://www.helpdrivers.com/disks/LSI/LSI53C895A/">Original driver source</a></li>
</ul>
</li>
<li><a href="https://archive.org/details/WindowsNTSP6HighEncryption">Windows NT 4 Service Pack 6 High Encryption version</a>. WinWorld offers the high encryption version of the installer but the standard encryption version of SP6 so it refuses to install. That is why I grabbed SP6 from archive.org instead.</li>
<li>Universal VBE Video Display Driver converted to an ISO. I used the beta 2015.01.01 version.
<ul>
<li><a href="/downloads/win_nt_proxmox/vbempk.iso">My ISO converted copy</a></li>
<li><a href="https://navozhdeniye.narod.ru/vbemp.htm#2">Original driver source</a></li>
</ul>
</li>
<li><a href="https://packages.vmware.com/tools/esx/3.5latest/windows/x86/VMware-tools-windows-3.5.0-988599.iso">VMware tools 3.5.0 ISO</a> (for the vmmouse driver).
<ul>
<li>Here is the <a href="https://web.archive.org/web/20230228033421/https://packages.vmware.com/tools/esx/3.5latest/windows/x86/VMware-tools-windows-3.5.0-988599.iso">Wayback Machine copy</a> in case the original one goes down.</li>
</ul>
</li>
</ul>
<h2>VM Creation</h2>
<p>First upload all the ISO files thorough Proxmox's web interface. Now create a new VM with these settings.</p>
<ul>
<li>General
<ul>
<li>ISO Image: <strong>en_winnt_4.0_svr.iso</strong></li>
</ul>
</li>
<li>OS
<ul>
<li>Guest OS Type: <strong>Microsoft Windows</strong></li>
<li>Guest OS Version: <strong>2000</strong></li>
</ul>
</li>
<li>System
<ul>
<li>Graphic card: <strong>Standard VGA</strong>. This will allow for higher resolution settings rather than with the default.</li>
<li>SCSI Controller: <strong>LSI 53C895A</strong></li>
</ul>
</li>
<li>Disks
<ul>
<li>Disk size: <strong>4GB</strong>. I could not get it to format a boot drive larger than this.</li>
<li>Bus/Device: <strong>SCSI</strong>. <strong>IMPORTANT:</strong> Do NOT use IDE. It will be slow noticeably slower and for some reason leads to file system corruption on NT4 guests despite changing the caching options.
<a href="/images/nt_corrupt.png"><img src="/images/nt_corrupt.png" alt="DLL File Corruption" /></a></li>
</ul>
</li>
<li>CPU
<ul>
<li>Sockets: <strong>1</strong></li>
<li>Cores: <strong>1</strong></li>
<li>Type: <strong>Pentium</strong>. <strong>IMPORTANT:</strong> The default CPU selection will lead to an immediate BSOD from the installer.</li>
</ul>
</li>
<li>Memory
<ul>
<li>Memory (MiB): <strong>256</strong>. 32 or higher will suffice.</li>
</ul>
</li>
<li>Network
<ul>
<li>Model: <strong>Realtek RTL8139</strong>. <a href="https://virtuallyfun.com/2012/12/20/installing-windows-nt-4-0-on-proxmoxve/">This post</a> says to manually edit the VM config to enable the AMD PCNET card which NT4 has built in support for, but it only runs at 10 Mb/s. The RTL8139 will allow for 100 Mb/s, but we have to install the driver post installation.</li>
</ul>
</li>
</ul>
<p>Now we have to make the SCSI drivers available to the Windows installer. It only accepts additional mass storage drivers as a floppy disk. Proxmox does not have a web interface for managing floppies so we have to configure this from the command line. Replace <code>VM_ID</code> in the following steps with the ID of your VM.</p>
<ol>
<li>Transfer lsi_533895a_floppy.img to the Proxmox server and move it to <code>/var/lib/vz/images/VM_ID/floppy.img</code>.</li>
<li>Open <code>/etc/pve/qemu-server/VM_ID.conf</code>, add this to the bottom, then save.</li>
</ol>
<pre><code>args: -drive file=/var/lib/vz/images/VM_ID/floppy.img,if=floppy,index=0
</code></pre>
<h2>OS Installation</h2>
<ol>
<li>Switch to the VM's console, start the VM, then begin pressing F6 when you see the Proxmox logo. Keep pressing until you see this screen.</li>
</ol>
<p><a href="/images/win_nt_f6_boot.png"><img src="/images/win_nt_f6_boot.png" alt="DLL File Corruption" /></a></p>
<ol start="2">
<li>Press the <strong>S</strong> key.</li>
<li>Select <strong>Other</strong></li>
</ol>
<p><a href="/images/win_nt_other.png"><img src="/images/win_nt_other.png" alt="Other" /></a></p>
<ol start="4">
<li>Press <strong>Enter</strong></li>
</ol>
<p><a href="/images/win_nt_insert.png"><img src="/images/win_nt_insert.png" alt="Insert Disk" /></a></p>
<ol start="5">
<li>Press <strong>Enter</strong> again to select <strong>Symbios PCI SCSI High Performance Driver</strong></li>
</ol>
<p><a href="/images/win_nt_scsi_driver.png"><img src="/images/win_nt_scsi_driver.png" alt="SCSI Driver" /></a></p>
<ol start="6">
<li>You should now see <strong>Symbios PCI SCSI High Performance Driver</strong> in the list of mass storage devices. Press <strong>Enter</strong>.</li>
</ol>
<p><a href="/images/win_nt_mass_storage.png"><img src="/images/win_nt_mass_storage.png" alt="Mass Storage Devices" /></a></p>
<ol start="7">
<li>Continue through the installation steps being sure to format the drive as <strong>NTFS</strong>.</li>
</ol>
<p>When the graphical installer comes up, you will notice the mouse is difficult to use. We will fix that in a later step. Struggle with the mouse or use the keyboard for the rest of the installation.</p>
<ol start="8">
<li>Continue the installation until you get to the Network Adapter search screen. Click <strong>Select from list...</strong></li>
</ol>
<p><a href="/images/win_nt_network_adapters.png"><img src="/images/win_nt_network_adapters.png" alt="Network Adapters" /></a></p>
<ol start="9">
<li>Select <strong>MS Loopback Adapter</strong>. <strong>IMPORTANT</strong>. Do NOT select &quot;Have Disk&quot; and install the RTL8139 drivers now. It will get stuck on installing TCP/IP and you will have to start over. We're using the MS Loopback Adapter to get around this bug.</li>
</ol>
<p><a href="/images/win_nt_loopback.png"><img src="/images/win_nt_loopback.png" alt="MS Loopback Adapter" /></a></p>
<ol start="10">
<li>Continue through the installer until it asks if there is a DHCP server on your network. Select <strong>No</strong>.</li>
</ol>
<p><a href="/images/win_nt_dhcp.png"><img src="/images/win_nt_dhcp.png" alt="DHCP?" /></a></p>
<ol start="11">
<li>Enter an IP address. Anything will do. We will be replacing it later.</li>
</ol>
<p><a href="/images/win_nt_ip.png"><img src="/images/win_nt_ip.png" alt="IP Address" /></a></p>
<ol start="12">
<li>Finish the installation and restart.</li>
</ol>
<h2>Service Pack 6 Installation</h2>
<ol>
<li>Press CTRL-ALT-DEL through the Proxmox console and login as Administrator.</li>
</ol>
<p><a href="/images/win_nt_cad.png"><img src="/images/win_nt_cad.png" alt="The three finger salute" /></a></p>
<ol start="2">
<li>In the VM hardware settings, switch to the ISO containing the Service Pack 6 installer.</li>
<li>Back in the console, navigate to the CD-ROM drive and run the installer.</li>
</ol>
<p><a href="/images/win_nt_sp6.png"><img src="/images/win_nt_sp6.png" alt="Service Pack 6 Installer" /></a></p>
<ol start="4">
<li>Reboot.</li>
<li>Go to Start &gt; Run, then run <strong>winver</strong> to verify your results.</li>
</ol>
<p><a href="/images/win_nt_winver.png"><img src="/images/win_nt_winver.png" alt="winver" /></a></p>
<h2>Mouse Drivers</h2>
<p>Lets fix the wonky mouse.</p>
<ol>
<li>In the VM hardware settings, switch to the ISO containing VMware Tool 3.5.0.</li>
<li>Back in the console, close the VMware tools installer. Go to <strong>Start &gt; Settings &gt; Control Panel &gt; Mouse</strong>.</li>
<li>In the <strong>General</strong> tab, click <strong>Change...</strong></li>
</ol>
<p><a href="/images/win_nt_mouse_settings.png"><img src="/images/win_nt_mouse_settings.png" alt="Mouse Settings" /></a></p>
<ol start="4">
<li>Click <strong>Have Disk...</strong></li>
</ol>
<p><a href="/images/win_nt_mouse_select.png"><img src="/images/win_nt_mouse_select.png" alt="Select Device" /></a></p>
<ol start="5">
<li>Click <strong>Browse...</strong> and navigate to <strong>D:\program files\VMware\VMware Tools\Drivers\mouse\winnt</strong>.</li>
</ol>
<p><a href="/images/win_nt_vmmouse.png"><img src="/images/win_nt_vmmouse.png" alt="Locate File" /></a></p>
<ol start="6">
<li>Finish installing the VMware Pointing Device driver then reboot.</li>
</ol>
<p>Now the mouse in the VM should be perfectly synchronized.</p>
<h2>Display Drivers</h2>
<p>This is necessary to get high color and resolution support.</p>
<ol>
<li>In the VM hardware settings, switch to the ISO containing the Universal VBE Video Display Driver.</li>
<li>Back in the console, open <strong>Display Properties</strong> then click <strong>Display Type...</strong>.</li>
</ol>
<p><a href="/images/win_nt_display.png"><img src="/images/win_nt_display.png" alt="Display Properties" /></a></p>
<ol start="3">
<li>Click <strong>Change...</strong></li>
</ol>
<p><a href="/images/win_nt_display2.png"><img src="/images/win_nt_display2.png" alt="Display Type" /></a></p>
<ol start="4">
<li>Click <strong>Have Disk...</strong>.</li>
</ol>
<p><a href="/images/win_nt_display3.png"><img src="/images/win_nt_display3.png" alt="Change Display" /></a></p>
<ol start="5">
<li>Click <strong>Browse...</strong></li>
</ol>
<p><a href="/images/win_nt_install_from_disk.png"><img src="/images/win_nt_install_from_disk.png" alt="Install From Disk" /></a></p>
<ol start="6">
<li>Navigate to <strong>D:\Vbe30\Nt4</strong>, then click <strong>Open...</strong>. Then click <strong>Ok...</strong></li>
</ol>
<p><a href="/images/win_nt_locate_file.png"><img src="/images/win_nt_locate_file.png" alt="Locate File" /></a></p>
<ol start="7">
<li>Install <strong>AnaPa Corp VBE Miniport</strong>. Then reboot.</li>
</ol>
<p><a href="/images/win_nt_vbe.png"><img src="/images/win_nt_vbe.png" alt="VBE Miniport" /></a></p>
<p>Now you can enjoy Windows NT 4 in true color and high resolution. Here it is at 1080p!</p>
<p><a href="/images/win_nt_high_res.png"><img src="/images/win_nt_high_res.png" alt="High Resolution Windows NT4" /></a></p>
<h2>Network Card Setup</h2>
<p>Now it's time to get on the Internet.</p>
<ol>
<li>In the VM hardware settings, switch to the ISO containing the Realtek 8139 drivers.</li>
<li>Back in the console, go to <strong>Start &gt; Settings &gt; Control Panel Network</strong>. The go to the <strong>Adapters</strong> tab.</li>
</ol>
<p><a href="/images/win_nt_network_adapters2.png"><img src="/images/win_nt_network_adapters2.png" alt="Network Adapters" /></a></p>
<ol start="3">
<li>Click <strong>Add...</strong>.</li>
<li>Click <strong>Have Disk...</strong></li>
<li>In the Insert Disk dialog, enter <strong>D:</strong></li>
</ol>
<p><a href="/images/win_nt_insert2.png"><img src="/images/win_nt_insert2.png" alt="Insert Disk" /></a></p>
<ol start="6">
<li>Finishing installing the PCI Fast Ethernet Adapter.</li>
</ol>
<p><a href="/images/win_nt_fast_ethernet.png"><img src="/images/win_nt_fast_ethernet.png" alt="Fast Ethernet Adapter" /></a></p>
<ol start="7">
<li>Select the MS Loopback Adapter and click <strong>Remove...</strong>. Then click <strong>Yes</strong>.</li>
</ol>
<p><a href="/images/win_nt_rm_loopback.png"><img src="/images/win_nt_rm_loopback.png" alt="Delete Loopback Adapter" /></a></p>
<ol start="8">
<li>Click <strong>Close</strong>. You should now have the option to configure your IP address. Configure it to your liking. I chose DHCP.</li>
</ol>
<p><a href="/images/win_nt_ip2.png"><img src="/images/win_nt_ip2.png" alt="TCP/IP Properties" /></a></p>
<ol start="9">
<li>Reboot and see if you're online.</li>
</ol>
<p><a href="/images/win_nt_internet.png"><img src="/images/win_nt_internet.png" alt="INTERNET!" /></a></p>
<p><a href="/images/win_nt_internet2.png"><img src="/images/win_nt_internet2.png" alt="MORE INTERNET!" /></a></p>
<h2>Conclusion</h2>
<p>We've installed the OS, set it up with better performing SCSI drivers, installed Service Pack 6, made the mouse usable, gave it better graphics, and got it online. Now what?</p>
<p>Add a bigger disk. Share some files to your old Windows machines. Learn how old domain controllers worked. Set up Exchange and get some mail going.</p>
<p>But most important, remember to have fun! Thank you for reading.</p>
<p>Want to discuss? Email me at <a href="mailto:blog@pipetogrep.org">blog@pipetogrep.org</a>.</p>]]></description>
        <dc:creator>Chris Jones (blog@pipetogrep.org)</dc:creator>
    </item>
    <item>
        <title>NetBSD &amp; iBooks &amp; Python, oh my!</title>
        <link>https://blog.pipetogrep.org/2025/05/14/netbsd-ibooks-python-oh-my/</link>
        <guid isPermaLink="true">https://blog.pipetogrep.org/2025/05/14/netbsd-ibooks-python-oh-my/</guid>
        <pubDate>Wed, 14 May 2025 16:52:30 -0400</pubDate>
        <atom:updated>2025-05-30T14:27:14-04:00</atom:updated>
        <description><![CDATA[<figure><img src="https://blog.pipetogrep.org/images/ibook2.jpg" alt="NetBSD &amp; iBooks &amp; Python, oh my!" title="Would you believe it feels faster than Windows 11?"><figcaption>Would you believe it feels faster than Windows 11?</figcaption></figure><h2>Preamble</h2>
<p><a href="https://www.netbsd.org/">NetBSD</a> is my favorite of the &quot;proper&quot; Unix operating systems. There are many technical reasons one could point to, including its speed, simplicity, and small install footprint. My favorite reason, however, is in NetBSD's slogan: <a href="https://www.netbsd.org/about/portability.html">&quot;Of course it runs NetBSD!&quot;</a></p>
<p>It is no secret that I am a fan of old hardware. My rule to prevent my collecting from becoming hoarding is that each piece has to have an actual use. Since NetBSD runs on everything from high end modern systems all the way down to the Sega Dreamcast, I decided to use an iBook G4 for game development in Python with <a href="https://www.pygame.org/wiki/about">pygame</a>.</p>
<h2>The Hardware</h2>
<p>This is my 12 inch iBook G4 from early 2004. Her name is Brick.
<a href="/images/ibook1.jpg"><img src="/images/ibook1.jpg" alt="An iBook G4 named &quot;Brick&quot;" /></a></p>
<p>Brick is decked out with:</p>
<ul>
<li>A 1 GHz G4 PowerPC Processor</li>
<li>1.25 GB or RAM</li>
<li>A 128 GB SSD</li>
<li>An ATI Mobility Radeon 9200</li>
<li>1024x768 LCD</li>
</ul>
<h2>NetBSD</h2>
<p>Obviously an iBook G4 is long out of support for OS updates. We need an alternate OS if we want to run up-to-date software on this device. NetBSD fits the bill perfectly.</p>
<p>NetBSD is a free and open-source Unix-like operating system based on the Berkeley Software Distribution (BSD). It's initial release was April 19, 1993 and continues to be developed today. The current version is 10.1 and is the version I am currently running. Why NetBSD on an iBook G4 and not Linux?</p>
<ul>
<li>First and foremost, it runs! Most Linux distributions have all but dropped PowerPC 32 bit support. There is still a community supported version of Debian Sid but the installer is hit or miss. Even when I do get it running, things like CPU frequency scaling requiring ancient packages, brightness control wonkiness, audio difficulties, video driver problems, and other various issues make the experience death by a thousand cuts.</li>
<li>It's fast! Even compared to Linux running on my much faster PowerMac G4, the iBook runs pygame at 60 FPS vs the PowerMac's 25 FPS. Both were running on a non-hardware accelerated X environment.</li>
<li>NetBSD runs better. All the issues I mentioned previously do not exist for me on NetBSD. Volume and brightness control keyboard shortcuts work even outside of a desktop environment (even in the console!). CPU frequency scaling works. Audio works. Video drivers work. While not everything works like suspend and 3D acceleration, what I need does and does without issue.</li>
<li>Modern and up-to-date packages. The iBook gets a new lease on life with modern encryption ciphers and certificates. Most importantly, modern Python!</li>
</ul>
<h2>pygame</h2>
<p>Per their <a href="https://www.pygame.org/wiki/about">about page</a>, &quot;Pygame is a set of Python modules designed for writing games. It is written on top of the excellent SDL library. This allows you to create fully featured games and multimedia programs in the python language. Pygame is highly portable and runs on nearly every platform and operating system.&quot;</p>
<p>On the date of this post, 32 bit PowerPC NetBSD has pygame's latest 2.6.0 release available. The only adjustment I had to make to get it to run on the iBook was to disable GLX in my xorg.conf.</p>
<h2>The Desktop Environment</h2>
<p>Don't expect miracles. There will be no 3D and no GPU or acceleration due to older video cards not being as well supported. Gnome or KDE, while available, won't run at all. XFCE runs OK, but is rather slow.</p>
<p>NetBSD ships with <a href="https://www.ctwm.org/index.html">CTWM</a> by default which is very small, basic, and fast, but still quite usable.</p>
<p><a href="/images/ctwm.png"><img src="/images/ctwm.png" alt="CTWM" /></a></p>
<p>I opted for <a href="https://i3wm.org/">i3</a> which is a dynamic tiling window manager.</p>
<h2>The Editing Environment</h2>
<p>Why <a href="https://www.vim.org/">Vim</a> of course! I use that plus <a href="https://github.com/amix/vimrc">The Ultimate vimrc</a> which provides a lovely, pre-built, and capable Vim environment so I can just get to work and stop messing with my configs! The biggest advantage of Vim for this use case is it's every bit as powerful as larger editors like Visual Studio Code but runs with a mere fraction of the resources.</p>
<h2>What Kind of Game?</h2>
<p>Kind of like a geometric puzzle game meets Dominoes where scoring is based on volume and symmetry. It is called &quot;Slantics&quot;. I can't take credit for the concept. That goes to my buddy Rick. Here is my <a href="https://github.com/llamallama/slantics">source code</a> for it. Here is a tiny sample of what it looks like.</p>
<p><a href="/images/slantics.gif"><img src="/images/slantics.gif" alt="Slantics" /></a></p>
<p>And here it is running on Brick!</p>
<p><a href="/images/ibook3.jpg"><img src="/images/ibook3.jpg" alt="iBook G4 Running Slantics" /></a></p>
<h2>Conclusion</h2>
<p>Just because a computer is old does not mean that it's trash. It also does not mean that it can't run more modern software even if in a more limited fashion. In the case of this computer, it's gorgeous and a joy to code on and deserves to be used for something enjoyable.</p>
<p>Thank you for reading!</p>
<p>Want to discuss? Email me at <a href="mailto:blog@pipetogrep.org">blog@pipetogrep.org</a>.</p>]]></description>
        <dc:creator>Chris Jones (blog@pipetogrep.org)</dc:creator>
    </item>
    <item>
        <title>A Geographically Distributed Retro LAN with pfSense and FreshTomato</title>
        <link>https://blog.pipetogrep.org/2025/05/08/a-geographically-distributed-retro-lan-with-pfsense-and-freshtomato/</link>
        <guid isPermaLink="true">https://blog.pipetogrep.org/2025/05/08/a-geographically-distributed-retro-lan-with-pfsense-and-freshtomato/</guid>
        <pubDate>Thu, 08 May 2025 21:29:05 -0400</pubDate>
        <atom:updated>2025-05-30T14:32:47-04:00</atom:updated>
        <description><![CDATA[<figure><img src="https://blog.pipetogrep.org/images/retro_lan.png" alt="A Geographically Distributed Retro LAN with pfSense and FreshTomato" title="Retro LAN Diagram"><figcaption>Retro LAN Diagram</figcaption></figure><h2>The Retro LAN</h2>
<p>I have a long time friend from college who got me into the retro computing hobby. He lives in Florida and I live in New York. This post describes how we're able to play on our 90s laptops together as if we were on the same network despite being in different states.</p>
<p>Let's back up a little. What does &quot;retro LAN&quot; even mean? My definition is a network solely dedicated to connecting old computers with each other. Since &quot;old&quot; is subjective, the definition here encompasses any computer that can connect via IEEE 802.3 Ethernet via RJ45 cable or 802.11 WiFi. For my friend and I, that includes Macintosh and PC laptops from the 90s, PowerPC Macs from the early 2000s, and Windows XP laptops.</p>
<p>What does one do with a retro LAN? In our case we have and will:</p>
<ul>
<li>Chat with Microsoft NetMeeting on Windows 98 (have)</li>
<li>Screen share and remote control each other's Windows 98 machines via NetMeeting (have)</li>
<li>Share files between Windows 98 machines via workgroup file sharing (have)</li>
<li>Video conference with iChat on OS X 10.3 - 10.5 (have)</li>
<li>Playing multiplayer games via TCP/IP and IPX (have)</li>
<li>Setting up old-school Win NT and/or Novell NetWare servers and having clients connect to them (will)</li>
</ul>
<h2>Requirements</h2>
<p>The way to bridge two remote networks is obvious. Use a VPN. But VPNs are complex and old operating systems do not support modern encryption standards. What we wanted was something that is:</p>
<ul>
<li>Always on</li>
<li>Would not require a VPN client to run on the retro machines. Even if they could; the CPU overhead is too much</li>
<li>Maintenance free</li>
<li>Runs at the Ethernet layer (layer 2) and not the IP layer (layer 3). That allows for non-IP-based protocols to work, like IPX and AppleTalk.</li>
<li>Isolated from our main networks for security reasons. It should be a completely isolated bastion of vulnerable retro goodness.</li>
<li>For the VPN Client to be &quot;portable&quot; with the exception of needing a power cable.</li>
</ul>
<h2>The Tech</h2>
<p>Because we want layer 2 connectivity, we settled on a TAP OpenVPN network. What follows is the whole tech stack diagrammed and explained, so get your propeller beanie cap out because this is going to get technical!</p>
<p>The tech and software stack we are working with is:</p>
<ul>
<li><a href="https://www.pfsense.org/">pfSense</a> router with 1 WAN and 3 LAN interfaces</li>
<li>OpenVPN running directly on pfSense bridged to one of the interfaces</li>
<li>A modded Netgear R7000 wireless router (fast, powerful, and super cheap on eBay!) running <a href="https://freshtomato.org/">FreshTomato</a> to act as a dedicated hardware OpenVPN client. Anything that plugs into it in Florida will instantly be on the retro LAN in New York.</li>
</ul>
<p>The end result looks like this. Click for the full size version.</p>
<p><a href="/images/retro_lan.png"><img src="/images/retro_lan.png" alt="Network Diagram" /></a></p>
<h2>Assumptions</h2>
<p>This guide assumes some working knowledge of:</p>
<ul>
<li>OpenVPN Servers and Clients</li>
<li>Router Modding with alternate firmware</li>
</ul>
<h2>pfSense</h2>
<p>On the pfSense box go to <strong>Interfaces &gt; Assignments</strong>, create an interface called &quot;retro&quot;, and assign it to an unused physical interface. We're using a dedicated interface because that lets us isolate the traffic from the rest of the network.</p>
<p><a href="/images/pfsense_interfaces.png"><img src="/images/pfsense_interfaces.png" alt="pfSense Interfaces" /></a></p>
<h3>pfSense Interface Settings</h3>
<p>The retro interface needs an IP address. I chose <strong>192.168.30.1</strong></p>
<p><a href="/images/pfsense_interface_ip.png"><img src="/images/pfsense_interface_ip.png" alt="pfSense Interface IP" /></a></p>
<p>Be sure to enable DHCP for this interface and set an IP range. This will be one of two IP ranges that will be in the same subnet but will not overlap. I chose <strong>192.168.30.100 - 192.168.30.150</strong>.</p>
<p><a href="/images/pfsense_interface_dhcp.png"><img src="/images/pfsense_interface_dhcp.png" alt="pfSense Interface DHCP" /></a></p>
<h3>pfSense Firewall Rules</h3>
<p>Now we need to set up firewall rules to prevent access between the retro and main LANs. In pfSense, go to <strong>Firewall &gt; Rules</strong>. For the retro interface, we need a rule that blocks all traffic from the retro subnets to the main LAN subnets.</p>
<p><a href="/images/pfsense_retro_firewall.png"><img src="/images/pfsense_retro_firewall.png" alt="pfSense Retro Firewall" /></a></p>
<p>Next we need a firewall rule under the main LAN interface that blocks all traffic from the main LAN subnets to the retro subnets.</p>
<p><a href="/images/pfsense_lan_firewall.png"><img src="/images/pfsense_lan_firewall.png" alt="pfSense Main LAN Firewall" /></a></p>
<h3>pfSense VPN Server</h3>
<p>Now that the interfaces are created, it's time to set up the VPN server. This guide assumes some level of knowledge with OpenVPN. It is a complicated topic and its setup and administration would make this post far longer than it already is.</p>
<p>pfSense has plenty of documentation on the topic which will walk you through pfSense's VPN wizard, certificate authority, and user certificate setup. I suggest starting with <a href="https://docs.netgate.com/pfsense/en/latest/recipes/openvpn-ra.html">this guide</a>, getting a VPN up and working first, and then modifying it for use with the retro LAN. The latter is what we will be covering here, however you can see my entire VPN setup <a href="/images/pfsense_vpn_full.png">here</a> for reference.</p>
<ul>
<li><strong>Device Mode</strong> needs to be set to <strong>tap - Layer 2 Tap Mode</strong></li>
</ul>
<p><a href="/images/pfsense_vpn_device_mode.png"><img src="/images/pfsense_vpn_device_mode.png" alt="pfSense VPN Device Mode" /></a></p>
<ul>
<li>Set <strong>Bridge Interface</strong> to the Retro interface we created earlier. We will need to manually create the bridge separately in a later step.</li>
</ul>
<p><a href="/images/pfsense_vpn_bridge_interface.png"><img src="/images/pfsense_vpn_bridge_interface.png" alt="pfSense VPN Bridge Interface" /></a></p>
<ul>
<li>Set <strong>Server Bridge DHCP Start</strong> and <strong>Server Bridge DHCP End</strong>. Make the subnet the same one from earlier (192.168.30.*) but make sure it's in a non-overlapping range. I chose <strong>192.168.30.50 - 192.168.30.99</strong>. There may be a better way to do this but I could not figure out how to get the DHCP IP range settings from earlier to apply.</li>
</ul>
<p><a href="/images/pfsense_vpn_dhcp.png"><img src="/images/pfsense_vpn_dhcp.png" alt="pfSense VPN DHCP" /></a></p>
<ul>
<li>Enable <strong>Inter-client Communication</strong></li>
</ul>
<p><a href="/images/pfsense_vpn_interclient_communication.png"><img src="/images/pfsense_vpn_interclient_communication.png" alt="pfSense VPN Inter-client Communication" /></a></p>
<ul>
<li>Enable <strong>DNS Default Domain</strong> and provide a value for DNS Default Domain. I chose Cloudflare's <strong>1.1.1.1</strong>. It might be possible to pass DNS requests through the VPN server to the DNS server listening on 192.168.30.1 for the clients but I was not able to figure it out and it wasn't that important to do so.</li>
</ul>
<p><a href="/images/pfsense_vpn_dns.png"><img src="/images/pfsense_vpn_dns.png" alt="pfSense VPN DNS" /></a></p>
<h3>pfSense OpenVPN Client Bridge</h3>
<p>Back on the Interface Assignments Page, create new interface and assign it to <strong>ovpns1 (Retro VPN)</strong>.</p>
<p><a href="/images/pfsense_interfaces2.png"><img src="/images/pfsense_interfaces2.png" alt="pfSense Client Bridge Interface" /></a></p>
<p>Under <strong>Interfaces &gt; Bridges</strong> create a new bridge with the <strong>RETRO</strong> and <strong>RETROVPN</strong> as the members.</p>
<p><a href="/images/pfsense_client_bridge.png"><img src="/images/pfsense_client_bridge.png" alt="pfSense Client Bridge" /></a></p>
<h3>pfSense User Creation</h3>
<p>A user will have to be created in order to log into the VPN server. I chose to use pfSense's local user manager. This is done simply by going to <strong>System &gt; User Manager</strong>, creating one, and assigning a password.</p>
<h3>pfSense VPN Client Export</h3>
<p>In preparation for setting up the VPN client, we need to export the client config for later reference. Before this can be done, the <strong>openvpn-client-export</strong> package must be installed. Go to <strong>System &gt; Package Manager</strong> and install it.</p>
<p>Now go to <strong>VPN &gt; OpenVPN &gt; Client Export</strong>, scroll down to the <strong>OpenVPN Clients</strong> section, and export the <strong>Most Clients</strong> option. It should download a file ending in &quot;.ovpn&quot;. Open the file in a text editor and keep it for future reference.</p>
<h2>FreshTomato on the Netgear R7000</h2>
<p>Now it is time to set up our magic remote retro LAN client box. For this, I am using a Netgear R7000 (aka AC1900), 802.11 AC WiFi Router. It has more than enough processing power for this use, is very easy to mod, and is reliable in my experience. At the time of writing, they cost $15-$20 on eBay. The end result will be a box that connects to your existing WiFi network, connects to the VPN server, and is isolated from the rest of network it resides on. We will be assuming that the
setup for this will be done on a network external to the one that pfSense is on.</p>
<p>Now we need to replace the firmware on it to give us the features we need. We will be using <a href="https://wiki.freshtomato.org/doku.php/start">FreshTomato</a> which, at the time of writing, is still actively developed and includes an OpenVPN client. This will not be a guide on how to flash and setup FreshTomato as they have their own <a href="https://wiki.freshtomato.org/doku.php/howtos">documentation</a>. I can tell you that I am using <strong>freshtomato-R7000-K26ARM-2025.2-AIO-64K.zip</strong> where the &quot;AIO&quot; means &quot;all-in-one&quot; and includes the OpenVPN client. Be sure to select the right firmware for your router or you may brick it.</p>
<p>I suggest getting to the where you can log into the FreshTomato admin page <strong>via a wired connection</strong>, and then coming back to this guide. Do <strong>NOT</strong> try configuring Tomato via a wireless connection as you won't be able to log back into it with the changes we are about to make.</p>
<h3>FreshTomato Wireless Client Mode</h3>
<p>In order to connect to the VPN, FreshTomato has to be connected to the internet. There are two options here.</p>
<ol>
<li>Connect the Netgear's WAN port into an existing switch on your network.</li>
<li>Connect use a WiFi network as FreshTomato's WAN.</li>
</ol>
<p>We will be doing option 2. In the FreshTomato admin, go to <strong>Basic &gt; Network</strong>. Set &quot;Wireless Client Mode&quot; to either the 2.4 GHz or 5 GHz radio depending on your existing network setup. You can only use one. Then set a LAN IP to something outside of your local network's subnet and <strong>disable the DHCP server</strong>. I chose <strong>10.0.0.1</strong>. Do not save yet.</p>
<p><a href="/images/tomato_wireless_client.png"><img src="/images/tomato_wireless_client.png" alt="FreshTomato Wireless Client Mode" /></a></p>
<p>Scroll down to the interface you selected to use as a wireless client. Set <strong>Wireless Network Mode</strong> to <strong>Wireless Client</strong>. Then put in the SSID and security credentials of your existing wireless network. Then disable the other wireless radio so it is no longer broadcasting.</p>
<p><a href="/images/tomato_wireless_connect.png"><img src="/images/tomato_wireless_connect.png" alt="FreshTomato Wireless Connection" /></a></p>
<p>Now save.</p>
<p>Next, on the computer you are using to connect to FreshTomato, set your wired connection to have a static IP of <strong>10.0.0.5</strong>. This is necessary since we disabled the DHCP server. Then navigate to <strong>10.0.0.1</strong> and you should be back at the admin interface.</p>
<p>Now go to <strong>Status &gt; Overview</strong> and verify that one radio is disabled and the other is successfully connected. You will know if it made a connection if you see a value for <strong>Signal Quality</strong></p>
<p>Now go to <strong>Status &gt; Overview</strong> and verify that one radio is disabled, that the other is wireless client mode and is successfully connected. You will know if it made a connection if you see a value for <strong>Signal Quality</strong>.</p>
<p><a href="/images/tomato_status.png"><img src="/images/tomato_status.png" alt="FreshTomato Status" /></a></p>
<h3>FreshTomato VPN Client</h3>
<p>Now for the hard part. We are ready to make our VPN client connection. Go to <strong>VPN &gt; OpenVPN Client</strong>. We will now be referencing the ovpn config file we downloaded from pfSense earlier.</p>
<p>The next part will assume your OpenVPN server has the same auth and cipher settings as mine. If not, update accordingly. Under Client 1's Basic settings set:</p>
<ul>
<li>Enable on Start: <strong>Enabled</strong></li>
<li>Interface Type: <strong>TAP</strong></li>
<li>Bridge TAP with: <strong>LAN (br0)</strong> (This corresponds to <strong>LAN1</strong> on the back of the router).</li>
<li>Protocol: <strong>UDP</strong></li>
<li>Server Address/Port: Use the IP address from the OpenVPN config we previously downloaded. It will be the same as pfSense's WAN IP. Use <strong>1194</strong> for the port.</li>
<li>Firewall: <strong>Automatic</strong></li>
<li>Authorization Mode: <strong>TLS</strong></li>
<li>TLS control channel security: <strong>Outgoing Auth (1)</strong></li>
<li>Username/Password Authentication: <strong>Enabled</strong></li>
<li>Username: The name of the user created in the &quot;pfSense User Creation&quot; step above.</li>
<li>Password: The password of the user created in the &quot;pfSense User Creation&quot; step above.</li>
<li>Username Authen. Only: <strong>Disabled</strong></li>
<li>Auth digest: <strong>SHA256</strong></li>
<li>Server is on the same subnet: <strong>Enabled</strong></li>
</ul>
<p><a href="/images/tomato_openvpn_client.png"><img src="/images/tomato_openvpn_client.png" alt="FreshTomato OpenVPN Client" /></a></p>
<p>Go to the <strong>Advanced</strong> tab for the OpenVPN client config. I left everything as the default with the exception of setting the ciphers to match pfSense's OpenVPN server settings.</p>
<ul>
<li>Data ciphers: <strong>AES-256-GCM:AES-128-GCM:CHACHA20-POLY1305:AES-256-CBC</strong></li>
</ul>
<p><a href="/images/tomato_openvpn_client_advanced.png"><img src="/images/tomato_openvpn_client_advanced.png" alt="FreshTomato OpenVPN Client Advanced" /></a></p>
<p>Go to the <strong>Keys</strong> tab for the OpenVPN client config. We will be referencing the ovpn config we previously downloaded.</p>
<ul>
<li>Static Key: Copy and paste from <strong>-----BEGIN OpenVPN Static key V1-----</strong> to <strong>-----END OpenVPN Static key V1-----</strong></li>
<li>Certificate Authority: Look for the <strong>&lt;ca&gt;</strong> section then from under it copy and paste from <strong>-----BEGIN CERTIFICATE-----</strong> to <strong>-----END CERTIFICATE-----</strong>.</li>
<li>Client Certificate: Look for the <strong>&lt;cert&gt;</strong> section then from under it copy and paste from <strong>-----BEGIN CERTIFICATE-----</strong> to <strong>-----END CERTIFICATE-----</strong>.</li>
<li>Client Key: Copy and paste from <strong>-----BEGIN PRIVATE KEY-----</strong> to <strong>-----END PRIVATE KEY-----</strong></li>
</ul>
<p><a href="/images/tomato_openvpn_client_keys.png"><img src="/images/tomato_openvpn_client_keys.png" alt="FreshTomato OpenVPN Client Keys" /></a></p>
<p>Save then hit that <strong>Start Now</strong> button!</p>
<h2>Status and Debugging</h2>
<p>Back in the pfSense admin page, go to <strong>Status OpenVPN</strong>. You should see a connected client.</p>
<p><a href="/images/pfsense_vpn_status.png"><img src="/images/pfsense_vpn_status.png" alt="pfSense OpenVPN Status" /></a></p>
<p>If you do not see a client, it is time to troubleshoot. The best place to do this is under <strong>Status &gt; System Logs &gt; OpenVPN</strong>. Look for any errors, search for the error message in your favorite search engine or LLM, correct them, and try again.</p>
<h2>Testing Your Work</h2>
<p>It is time to plug a network cable into the FreshTomato device. This will <strong>only</strong> work by plugging into <strong>LAN1</strong> as that is the port the TAP connection is bridged to. Upon plugging in, the machine should receive an address in the 192.168.30.* range.</p>
<p>Congratulations! That FreshTomato router is now a maintenance free, remote gateway to your very own retro LAN. Because the client's existing WiFi network is its WAN, it is isolated from everything else on the main network it is connected to. Because of the separate interface and firewall rules on pfSense, the retro LAN is isolated from any other network as well. You are now safe from Blaster Worms and ILOVEYOU viruses!</p>
<p>Have fun!</p>
<p>Want to discuss? Email me at <a href="mailto:blog@pipetogrep.org">blog@pipetogrep.org</a>.</p>]]></description>
        <dc:creator>Chris Jones (blog@pipetogrep.org)</dc:creator>
    </item>
    <item>
        <title>IDE Drive Adapters and Picky Retro Computers</title>
        <link>https://blog.pipetogrep.org/2025/05/06/ide-drive-adapters-and-picky-retro-computers/</link>
        <guid isPermaLink="true">https://blog.pipetogrep.org/2025/05/06/ide-drive-adapters-and-picky-retro-computers/</guid>
        <pubDate>Tue, 06 May 2025 00:50:10 -0400</pubDate>
        <atom:updated>2025-05-30T14:29:11-04:00</atom:updated>
        <description><![CDATA[<figure><img src="https://blog.pipetogrep.org/images/drake_cf_cards.jpg" alt="IDE Drive Adapters and Picky Retro Computers" title="Removable, no. Fixed, yes."><figcaption>Removable, no. Fixed, yes.</figcaption></figure><p>I recently acquired a Dell Inspiron 7000 Laptop from 1998. It's a beast of a laptop weighing in at 8 pounds! It has a Pentium II 300 MHz Processor, 320 MB of RAM, and a removable ATI video card! What it did not have, however, was a hard drive.</p>
<p>I'm no stranger to using IDE adapters that convert relatively modern media like SD cards or SATA SSDs to work as a laptop IDE drive. I tried one of the latter, but no luck. The Dell saw no hard drive in its BIOS settings. What's worse is the BIOS is extremely limited, only allowing for auto drive detection.</p>
<p>After some research, I decided to go with the Compact Flash (CF) Card to IDE adapter route. It turns out that CF Cards can behave exactly like an IDE drive. In fact, CF to IDE adapters have no chips on them, only traces to convert the CF Card pinout to IDE.</p>
<p>That still didn't work. After trying multiple CF cards (8GB and under) and multiple CF to IDE adapters, I was ready to purchase some old spinning rust of dubious quality off of eBay or either give up. Then I learned is that CF Cards have two modes, removable and fixed.</p>
<p>While some computers will boot from CF cards in removable mode, others will only allow booting from a card in fixed disk mode. That left me with two options. Purchase an industrial grade CF card (expensive mistake if it didn't work) or try to convert an existing CF Card.</p>
<p>Why an industrial CF card? Not only are they more reliable with their SLC NAND, but they default to fixed mode. Before going that route, I decided to try and convert a removable consumer grade card. But how do we convert it?</p>
<p>An old utility created by Sandisk that does exactly that called <a href="https://vogonsdrivers.com/getfile.php?fileid=1862">ATCFWCHG</a>. Problem is, there are not many CF cards it will work on. Per <a href="https://www.vogons.org/viewtopic.php?p=1326309#p1326309">this Vogons post</a>, I purchased this known convertible card to test with.</p>
<p><img src="/images/cf_card_2pb.jpg" alt="SanDisk Ultra II 2GB" /></p>
<p>I installed the card with an IDE CF card adapter into another vintage machine that did recognize it, booted it from DOS and ran the <code>ATCFWCHG /P /F</code>. After seeing it fail on all the other cards I tried previously, I finally got to see some success.</p>
<p><img src="/images/atcfwchg.jpg" alt="ATCFWCHG Success" /></p>
<p>After that, the Dell Inspiron 7000 saw the card as available and bootable. Knowing that it works, I purchased a higher capacity industrial card. I look forward to writing more about this machine soon!</p>
<p>Want to discuss? Email me at <a href="mailto:blog@pipetogrep.org">blog@pipetogrep.org</a>.</p>]]></description>
        <dc:creator>Chris Jones (blog@pipetogrep.org)</dc:creator>
    </item>
</channel>
</rss>
